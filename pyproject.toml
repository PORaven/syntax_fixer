[tool.isort]
# Целевая версия Python, для которой isort будет применять правила/совместимость.
# Возможные значения: целое или число, соответствующее версии (например, 312 для 3.12).
py_version = 312

# Учитывать пометки # noqa в файлах — не изменять отмеченные строки.
# Возможные значения: true / false
honor_noqa = true

# Список расширений файлов, которые isort будет обрабатывать.
# Пример: ['pxd', 'py', 'pyi', 'pyx', 'txt']
supported_extensions = ['pxd', 'py', 'pyi', 'pyx']

# Учитывать локальные .gitignore файлы (игнорировать файлы/папки, перечисленные в .gitignore).
# Тип: Dict (в конфиге можно задавать параметры), но здесь включено булевым флагом.
#git_ignore = 

# (Закомментировано) Список расширений, которые явно блокируются.
# blocked_extensions = ['pex']

# (Закомментировано) Настройка форматтера (если нужен внешний форматтер).
# formatter =

# (Закомментировано) Функция форматирования, если используется кастомная.
# formatting_function =

# (Закомментировано) Включение/отключение цветного вывода в терминале.
# color_output

# Принудительно перемещать указанные импорты вверх (пустой список по умолчанию).
# force_to_top = []

# Перемещать "плавающие" (float) импорты вверх — поведение по проекту.
# Тип: Bool
float_to_top = true

# (Закомментировано) Опции пропусков и расширения исключений.
# scip = []
# extend_skip = []
# scip_glob = []
# extend_skip_glob = []

# Пропускать файлы, перечисленные в .gitignore (аналогично git_ignore).
# Тип: Bool
skip_gitignore = true

# (Закомментировано) Фильтрация файлов (включение/отключение).
# filter_files = false

# Максимальная длина строки для isort (рекомендация PEP8 — 79).
# Тип: Int
line_length = 79

# Длина переноса.
# Если нужно, можно исправить ключ на wrap_length.
#wrap_length = 0

# (Закомментировано) Тип конца строки (lf/crlf/native).
# line_ending =

# (Закомментировано) Настройка секций импортов (порядок секций).
# sections = []

# Отключить секции импортов — объединять импорты без разделения на секции.
# Тип: Bool
no_sections = true

# (Закомментировано) Явное указание known_* категорий (future/third_party/first_party и т.д.)
# known_future_library
# known_third_party
# known_first_party
# known_local_folder
# known_standard_library
# extra_standard_library
# known_other
# src_paths = []
# auto_identify_namespace_packages = true
# follow_links = true
# namespace_packages

#Рекомендация Pep=3
# Режим многострочного вывода (модифицирует стиль разбивки длинных импортов).
# Тип: Int (например, 0, 1, 2, ...)
multi_line_output = 0

# false - рекомендация Pep
# (Закомментировано) Объединять "straight" импорты в одну строку (false — PEP-рекомендация)
# combine_straight_imports = false

# (Закомментировано) Принудительно отдельные блоки.
# forced_separate

# (Закомментировано) Настройка отступа при форматировании импортов.
# indent = ["   "]

# (Закомментировано) Префикс для комментариев.
# comment_prefix = #

# (Закомментировано) Сортировка по длине.
# length_sort = false

# (Закомментировано) Принудительно добавлять импорты.
# add_imports = []
# force_adds = false

# (Закомментировано) Принудительно удалять импорты.
# remove_imports = []

# (Закомментировано) Режим append-only (только добавление импортов, без удаления).
# append_only = true

# (Закомментировано) Реверсивная сортировка относительных импортов.
# reverse_relative = true

# (Закомментировано) Принудительный single-line режим.
# force_single_line = false
# single_line_exclusions = []

# (Закомментировано) Секция по умолчанию для импортов.
# default_section = THIRDPARTY

# (Закомментировано) Заголовки/футеры для импортов (metadata).
# import_headings = {}
# import_footers = {}

# (Закомментировано) Балансированный перенос.
# balanced_wrapping = false

# Использовать скобки для многострочных импортов.
# Тип: Bool
use_parentheses = true

# true - соответствует Pep
# Сортировать по типу импорта (например, from/import distinction) — соответствует PEP.
# Тип: Bool
order_by_type = true

# Атомарная запись файлов (atomic = true) — безопасная запись файла.
# Тип: Bool
atomic = true

# (Закомментировано) Количество пустых строк до импортов.
# lines_before_imports = -1

# Количество пустых строк после импортов.
# Тип: Int
lines_after_imports = 1

# Убедиться в наличии пустой строки перед комментариями, следующими за импортами.
# Тип: Bool
ensure_newline_before_comments = true

# (Закомментировано) Линии между секциями/типами
# lines_between_sections = 0
# lines_between_types = 0
# no_lines_before = []

# (Закомментировано) Объединять as-импорты.
# combine_as_imports = false

# Объединять star-импорты (combine_star = true).
# Тип: Bool
combine_star = true

# (Закомментировано) Ставить ли star-импорты первыми (PEP рекомендует избегать star-импортов).
# star_first = false

# true - рекомендация Pep
# Включать завершающую запятую — соответствует PEP для минимизации diffs.
include_trailing_comma = true

# true - рекомендация Pep
# (Закомментировано) Разбивать при наличии завершающей запятой.
# split_on_trailing_comma = false

# (Закомментировано) from-first поведение.
# from_first = false

# Включить подробный вывод (verbose).
# Тип: Bool
verbose = true

# (Закомментировано) Тихий режим.
# quiet = false

# Обрабатывать только изменённые файлы (optimization).
# Тип: Bool
only_modified = true

# Принудительно сортировать по алфавиту внутри секций.
# Тип: Bool
force_alphabetical_sort_within_sections = true

# (Закомментировано) Принудительная полная алфавитная сортировка.
# force_alphabetical_sort = false

# (Закомментировано) Лексикографическая сортировка.
# lexicographical = false

# (Закомментировано) Группировка по пакету.
# group_by_package = false

# (Закомментировано) Игнорировать/учитывать пробелы и inline сортировку.
# ignore_whitespace = false
# no_inline_sort = false

# (Закомментировано) Регистрозависимость сортировки/особые кейсы.
# case_sensitive = false
# force_sort_within_sections = false
# sort_relative_in_force_sorted_sections = false
# honor_case_in_force_sorted_sections = true

# (Закомментировано) Виртуальная/conda среда.
# virtual_env =
# conda_env =

# Удалять избыточные псевдонимы (например, `import x as x`).
# Тип: Bool
remove_redundant_aliases = true

# (Закомментировано) Обращать комментарии как код.
# treat_comments_as_code
# treat_all_comments_as_code = false

# (Закомментировано) Дедуп заголовков/только секции/отступленные заголовки.
# dedup_headings = true
# only_sections = false
# indented_import_headings = true

# (Закомментировано) Форматирование ошибок/успеха (строки формата).
# format_error
# format_success

[tool.mypy]
# Устанавливает минимальную версию Python для проверки типов
# Возможные значения: любая версия Python в формате float (например, 3.6, 3.12)
python_version = "3.12"

# Включает строгую проверку типов
# Возможные значения: true / false
# true — включает все строгие проверки (strict), включая warn_unused_ignores, disallow_untyped_defs и т.д.
strict = true

# Показывает коды ошибок в выводе
# Возможные значения: true / false
# true — выводит коды ошибок (например, [attr-defined]), полезно для фильтрации
show_error_codes = true

# Отключает проверку типов в сторонних библиотеках без аннотаций
# Возможные значения: true / false
# true — пропускает проверку библиотек без type hints
ignore_missing_imports = true

# Исключает файлы или директории из проверки
# Возможные значения: любой regex-паттерн
# Пример: "tests/.*" — исключает все файлы внутри папки tests
#exclude = "tests/.*"

# Включает предупреждения о неиспользуемых игнорах
# Возможные значения: true / false
# true — предупреждает о игнорах типа `# type: ignore`, которые не нужны
warn_unused_ignores = true

# Подключает плагин для сторонних библиотек
# Возможные значения: список строк с путями к плагинам
# Пример: подключение плагина Pydantic
# plugins = ["pydantic.mypy"]


[tool.ruff]
# Включение предварительного просмотра новых правил
# Возможные значения: true / false
# true — новые правила будут применяться в анализе, но могут быть нестабильными
preview = true

# Учитывать .gitignore
# Возможные значения: true / false
# true — файлы из .gitignore будут пропущены анализом
respect-gitignore = true

# Целевая версия Python
# Возможные значения: "py36", "py37", "py38", "py39", "py310", "py311", "py312"
# Используется для проверки совместимости кода с указанной версией Python
target-version = "py312"

# Автоматически исправлять ошибки
# Возможные значения: true / false
# true — Ruff будет исправлять ошибки автоматически
fix = true

# Показывать исправления в консоли
# Возможные значения: true / false
# true — отображать в терминале изменения, которые применил Ruff
show-fixes = true

# Максимальная длина строки
# Любое положительное число
# Например, 79 соответствует рекомендациям PEP8
line-length = 79

# Какие файлы включать для анализа
# Список паттернов, например ["*.py", "src/**/*.py"]
#include = ["*.py"]

# Использовать небезопасные исправления
# Возможные значения: true / false
# true — применять исправления, которые могут изменять поведение кода
unsafe-fixes = false


[tool.ruff.analyze]
# Анализировать строковые импорты
# Возможные значения: true / false
# true — Ruff будет проверять импорты, указанные в виде строк
detect-string-imports = true

# Анализировать зависимости
# Возможные значения: true / false
# true — Ruff будет учитывать зависимости при анализе
#include-dependencies = true


[tool.ruff.format]
# Форматирование кода внутри docstring
# Возможные значения: true / false
# true — код в docstring будет автоматически форматироваться
docstring-code-format = true

# Максимальная длина строки внутри docstring
# Любое положительное число
docstring-code-line-length = 72

# Стиль отступов
# Возможные значения: "space" / "tab"
# "space" — использовать пробелы, "tab" — использовать табы
indent-style = "space"

# Тип перевода строки
# Возможные значения: "lf" / "crlf" / "native"
# "lf" — Unix, "crlf" — Windows, "native" — по умолчанию ОС
line-ending = "native"

# Пропуск магической запятой в конце длинных списков и аргументов
# Возможные значения: true / false
# true — не добавлять "магическую" запятую в конце
# false — добавлять, чтобы минимизировать diff при добавлении новых элементов
skip-magic-trailing-comma = false

# Стиль кавычек
# Возможные значения: "single" / "double" / "consistent"
# "single" — использовать одинарные кавычки
# "double" — использовать двойные кавычки
# "consistent" — единый стиль в блоке, минимизируя экранирование
quote-style = "double"


