[tool.mypy]
# Устанавливает минимальную версию Python для проверки типов
# Возможные значения: любая версия Python в формате float (например, 3.6, 3.12)
python_version = "3.12"

# Включает строгую проверку типов
# Возможные значения: true / false
# true — включает все строгие проверки (strict), включая warn_unused_ignores, disallow_untyped_defs и т.д.
strict = true

# Показывает коды ошибок в выводе
# Возможные значения: true / false
# true — выводит коды ошибок (например, [attr-defined]), полезно для фильтрации
show_error_codes = true

# Отключает проверку типов в сторонних библиотеках без аннотаций
# Возможные значения: true / false
# true — пропускает проверку библиотек без type hints
ignore_missing_imports = true

# Исключает файлы или директории из проверки
# Возможные значения: любой regex-паттерн
# Пример: "tests/.*" — исключает все файлы внутри папки tests
#exclude = "tests/.*"

# Включает предупреждения о неиспользуемых игнорах
# Возможные значения: true / false
# true — предупреждает о игнорах типа `# type: ignore`, которые не нужны
warn_unused_ignores = true

# Подключает плагин для сторонних библиотек
# Возможные значения: список строк с путями к плагинам
# Пример: подключение плагина Pydantic
# plugins = ["pydantic.mypy"]


[tool.ruff]
# Включение предварительного просмотра новых правил
# Возможные значения: true / false
# true — новые правила будут применяться в анализе, но могут быть нестабильными
preview = true

# Учитывать .gitignore
# Возможные значения: true / false
# true — файлы из .gitignore будут пропущены анализом
respect-gitignore = true

# Целевая версия Python
# Возможные значения: "py36", "py37", "py38", "py39", "py310", "py311", "py312"
# Используется для проверки совместимости кода с указанной версией Python
target-version = "py312"

# Автоматически исправлять ошибки
# Возможные значения: true / false
# true — Ruff будет исправлять ошибки автоматически
fix = true

# Показывать исправления в консоли
# Возможные значения: true / false
# true — отображать в терминале изменения, которые применил Ruff
show-fixes = true

# Максимальная длина строки
# Любое положительное число
# Например, 79 соответствует рекомендациям PEP8
line-length = 79

# Какие файлы включать для анализа
# Список паттернов, например ["*.py", "src/**/*.py"]
include = ["*.py"]

# Использовать небезопасные исправления
# Возможные значения: true / false
# true — применять исправления, которые могут изменять поведение кода
unsafe-fixes = false


[tool.ruff.analyze]
# Анализировать строковые импорты
# Возможные значения: true / false
# true — Ruff будет проверять импорты, указанные в виде строк
detect-string-imports = true

# Анализировать зависимости
# Возможные значения: true / false
# true — Ruff будет учитывать зависимости при анализе
#include-dependencies = true


[tool.ruff.format]
# Форматирование кода внутри docstring
# Возможные значения: true / false
# true — код в docstring будет автоматически форматироваться
docstring-code-format = true

# Максимальная длина строки внутри docstring
# Любое положительное число
docstring-code-line-length = 72

# Стиль отступов
# Возможные значения: "space" / "tab"
# "space" — использовать пробелы, "tab" — использовать табы
indent-style = "space"

# Тип перевода строки
# Возможные значения: "lf" / "crlf" / "native"
# "lf" — Unix, "crlf" — Windows, "native" — по умолчанию ОС
line-ending = "native"

# Пропуск магической запятой в конце длинных списков и аргументов
# Возможные значения: true / false
# true — не добавлять "магическую" запятую в конце
# false — добавлять, чтобы минимизировать diff при добавлении новых элементов
skip-magic-trailing-comma = false

# Стиль кавычек
# Возможные значения: "single" / "double" / "consistent"
# "single" — использовать одинарные кавычки
# "double" — использовать двойные кавычки
# "consistent" — единый стиль в блоке, минимизируя экранирование
quote-style = "double"


